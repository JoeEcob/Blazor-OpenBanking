@page "/dashboard"

@inject DatabaseService DatabaseService
@inject BankingUpdateService BankingUpdateService

<div class="dashboard">
    @if (isLoading)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="add-new">
            <a href=@BankingUpdateService.GetAuthUrl()>Add new account</a>
        </div>

        <div class="flex-grid">
            <section class="dashboard-accounts">

                <h2>Accounts</h2>
                @foreach (var account in accounts)
                {
                    <div class="account clickable" @onclick="@(e => FetchTransactions(account.ProviderId, account.AccountId, account.LastTransactionUpdate))">
                        <div class="text-wrapper">
                            <div class="title">@account.DisplayName<span class="value">@account.CurrentBalance.ToString("C")</span></div>
                            <div><em>Available</em><span class="value">@account.AvailableBalance.ToString("C")</span></div>
                            <div><em>Overdraft</em><span class="value">@account.Overdraft.ToString("C")</span></div>
                        </div>

                        @if (account.LogoUri != null)
                        {
                            <span class="account-logo">
                                <img src="@account.LogoUri" />
                            </span>
                        }
                    </div>
                }
            </section>

            <section class="dashboard-transactions">
                @if (transactions != null && transactions.Length > 0)
                {
                    <h2>Transactions</h2>
                    int previousMonth = -1;
                    @foreach (var transaction in transactions)
                    {
                        if (transaction.Timestamp.Month != previousMonth)
                        {
                            previousMonth = transaction.Timestamp.Month;
                            <h3 class="transaction-title">@transaction.Timestamp.ToString("MMMM \\'yy")</h3>
                        }

                        <div class="transaction">
                            <span class="date" title="@transaction.Timestamp.ToString("G")">@transaction.Timestamp.ToString("d")</span>
                            <span class="description">@transaction.Description</span>
                            <span class="amount">@transaction.Amount.ToString("C")</span>
                        </div>
                    }
                }
            </section>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private Account[] accounts;
    private Transaction[] transactions;

    protected override async Task OnInitializedAsync()
    {
        isLoading = false;
        accounts = DatabaseService.GetAccounts();
        transactions = new Transaction[0];

        if (accounts == null || accounts.Length == 0 || accounts.Any(x => x.LastUpdated < DateTime.UtcNow.AddDays(-1)))
        {
            await BankingUpdateService.FetchLatestAccountInfo();
            accounts = DatabaseService.GetAccounts();
        }

        if (accounts.Length > 0)
        {
            var firstAccount = accounts[0];
            await FetchTransactions(firstAccount.ProviderId, firstAccount.AccountId, firstAccount.LastTransactionUpdate);
        }
    }

    private async Task FetchTransactions(LiteDB.ObjectId providerId, string accountId, DateTime lastTransactionUpdate)
    {
        transactions = DatabaseService.GetTransactions(accountId);

        if (transactions == null || transactions.Length == 0 || lastTransactionUpdate < DateTime.UtcNow.AddDays(-1))
        {
            await BankingUpdateService.UpdateTransactions(providerId, accountId);
            transactions = DatabaseService.GetTransactions(accountId);
            // Need to update accounts now to get the latest transaction update time
            accounts = DatabaseService.GetAccounts();
        }
    }
}
